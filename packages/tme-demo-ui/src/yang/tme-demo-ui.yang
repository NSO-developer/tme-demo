module tme-demo-ui {

  namespace "http://com.example/tme-demo-ui";
  prefix tme-demo-ui;

  import tailf-common {
    prefix tailf;
  }

  import tailf-ncs {
    prefix ncs;
  }

  import tailf-webui {
    prefix webui;
  }

  typedef icon-type {
    type enumeration {
      enum "customer-router";
      enum "firewall";
      enum "generic";
      enum "load-balancer";
      enum "router";
      enum "service-chain";
      enum "switch";
      enum "web-server";
    }
  }

  typedef icon-container {
    type enumeration {
      enum "customer";
      enum "data-centre";
      enum "provider";
    }
  }

  typedef icon-coordinate {
    type decimal64 {
      fraction-digits 18;
      range "0 .. 1";
    }
    description "Normalized relative coordinate";
  }

  grouping icon-coordinates {
    container coord {
      leaf x {
        type icon-coordinate;
      }

      leaf y {
        type icon-coordinate;
      }
    }
  }

  augment "/webui:webui/webui:data-stores"  {

    container static-map {

      tailf:info "Static map icon information";

      list icon {
        key name;

        leaf name {
            type string;
        }

        choice item-type {
          case device {
            leaf device {
              tailf:non-strict-leafref {
                path "/ncs:devices/ncs:device/ncs:name";
              }
              type string;
            }
          }

          case ns-info {
            leaf ns-info {
        //      tailf:non-strict-leafref {
        //        path "/nfvo-rel2:nfvo/nfvo-rel2:ns-info/nfvo-rel2-esc:esc/nfvo-rel2-esc:ns-info/nfvo-rel2-esc:id";
        //      }
              type string;
            }
          }
        }

        leaf type {
          type icon-type;
        }

        leaf container {
          type icon-container;
        }

        uses icon-coordinates;

        list zoomed {
          key container;

          leaf container {
            type icon-container;
          }

          uses icon-coordinates;
        }

        leaf underlay {
          type boolean;
        }
      }
    }
  }
}




